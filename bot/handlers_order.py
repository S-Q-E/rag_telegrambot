# bot/handlers_order.py
from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger
from keyboards import get_assistants_keyboard, get_cancel_keyboard, get_main_menu
from services import get_rag_response, upload_document_to_api

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
router = Router()


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class OrderState(StatesGroup):
    waiting_for_query = State()
    waiting_for_document = State()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    logger.info(f"User {message.from_user.id} started the bot.")
    await state.clear()
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã–±–µ—Ä–∏—Ç–µ, —Å –∫–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å:",
        reply_markup=get_main_menu()
    )
    await state.set_state(OrderState.waiting_for_query)


@router.message(Command("upload"))
async def cmd_upload(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /upload."""
    user_data = await state.get_data()

    logger.info(f"User {message.from_user.id} wants to upload a document")
    await message.answer(
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt —Ñ–∞–π–ª –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –±–æ—Ç–∞</b>.",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(OrderState.waiting_for_document)


@router.message(OrderState.waiting_for_document, F.document)
async def handle_document(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    if not message.document.file_name.endswith('.txt'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt.")
        return

    user_data = await state.get_data()
    user_id = str(message.from_user.id)

    await message.bot.send_chat_action(chat_id=message.chat.id, action='typing')

    try:
        file = await message.bot.get_file(message.document.file_id)
        file_content_bytes = await message.bot.download_file(file.file_path)
        file_content = file_content_bytes.read().decode('utf-8')

        # –í—ã–∑–æ–≤ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        success, api_message = await upload_document_to_api(
            assistant="general",
            file_name=message.document.file_name,
            content=file_content,
            user_id=user_id
        )

        if success:
            await message.answer(f"‚úÖ –§–∞–π–ª '{message.document.file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
            logger.info(f"Document '{message.document.file_name}' uploaded successfully for user {user_id}.")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª. –û—à–∏–±–∫–∞: {api_message}")

    except Exception as e:
        logger.exception("Failed to handle document.")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    await state.set_state(OrderState.waiting_for_query)


@router.callback_query(F.data == "cancel_upload")
async def cq_cancel_upload(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞."""
    await callback.message.edit_text("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.set_state(OrderState.waiting_for_query)
    await callback.answer()


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    logger.info(f"User {message.from_user.id} type help command")
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \mode —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —Ä–µ–∂–∏–º –±–æ—Ç–∞")


@router.message(OrderState.waiting_for_query, ~F.text.startswith('/'))
async def handle_user_query(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –≤—ã–±–æ—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞)."""
    query = message.text
    user_id = message.from_user.id

    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
        return

    # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
    assistant = "general"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
    try:
        await message.bot.send_chat_action(chat_id=message.chat.id, action='typing')
    except Exception as e:
        logger.warning(f"Failed to send chat action: {e}")

    logger.info(f"User {user_id} sent query: '{query}'")

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
    api_response = await get_rag_response(
        assistant="general",
        query=query,
        user_id=str(user_id)
    )

    response_text = ""
    sources_text = ""

    if isinstance(api_response, dict):
        response_text = api_response.get("response", "")
        sources = api_response.get("sources", [])
        confidence = api_response.get("confidence")
        if sources:
            sources_text = "\n\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join(sources)
        if confidence is not None:
            sources_text += f"\n\n(–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence})"
    else:
        response_text = str(api_response)

    logger.debug(f"Response for user {user_id}: {response_text}")
    await message.answer(response_text + sources_text)


@router.message(F.text == "ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def menu_query(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(OrderState.waiting_for_query)

@router.message(F.text == "‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
async def menu_upload(message: types.Message, state: FSMContext):
    await cmd_upload(message, state)

@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
async def menu_delete(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /del <doc_id>")

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def menu_help(message: types.Message):
    await cmd_help(message)

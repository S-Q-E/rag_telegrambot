# bot/handlers_docs.py
import asyncio
import tempfile
import os
import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram import Bot

import services

router = Router(name="docs")
logger = logging.getLogger(__name__)


@router.message(Command("docs"))
async def cmd_list_docs(message: Message):
    docs = await asyncio.to_thread(services.get_documents)
    if not docs:
        await message.answer("üìÇ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    lines = []
    for d in docs:
        doc_id = d.get("id") or d.get("doc_id") or d.get("_id") or str(d.get("id", "unknown"))
        filename = d.get("filename") or d.get("name") or d.get("title") or "unknown"
        lines.append(f"üìÑ {doc_id}: {filename}")
    text = "\n".join(lines)
    # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –ø—Ä–∏ –¥–ª–∏–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–∞—Å—Ç—è–º–∏
    await message.answer(text[:3900])


@router.message(F.document)
async def handle_file(message: Message, bot: Bot):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ñ–∞–π–ª ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API –≤ —Ñ–æ–Ω–µ.
    """
    doc = message.document
    # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    suffix = os.path.splitext(doc.file_name or "")[1] or ""
    with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as tf:
        tmp_path = tf.name

    # —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
    file_obj = await bot.get_file(doc.file_id)
    await bot.download_file(file_obj.file_path, tmp_path)

    # –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ background thread (embedding –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –≤—Ä–µ–º—è)
    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Å–æ–∑–¥–∞—é —ç–º–±–µ–¥–¥–∏–Ω–≥–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.")
    res = await asyncio.to_thread(services.upload_document, tmp_path, doc.file_name)

    # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove(tmp_path)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª %s", tmp_path)

    if res:
        await message.answer(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç {doc.file_name} –∑–∞–≥—Ä—É–∂–µ–Ω.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ—Å–º–æ—Ç—Ä–∏ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")


@router.message(Command("del"))
async def cmd_delete_doc(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /del <doc_id>")
        return
    doc_id = args[1]
    ok = await asyncio.to_thread(services.delete_document, doc_id)
    if ok:
        await message.answer(f"üóë –î–æ–∫—É–º–µ–Ω—Ç {doc_id} —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")


@router.message(Command("doc"))
async def cmd_get_doc(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /doc <doc_id>")
        return
    doc_id = args[1]
    doc = await asyncio.to_thread(services.get_document, doc_id)
    if not doc:
        await message.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await message.answer(
        f"üìÑ {doc.get('filename','unknown')}\n"
        f"ID: {doc.get('id')}\n"
        f"–†–∞–∑–º–µ—Ä: {doc.get('size','?')} –±–∞–π—Ç\n"
        f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {doc.get('meta', '')}"
    )
